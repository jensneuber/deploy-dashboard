{"version":3,"sources":["components/Credentials.tsx","helper/auth.ts","components/OttiEnv.tsx","components/Platform.tsx","components/Stations.tsx","helper/githubAPI.ts","components/Branches.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Credentials","setAuth","useLocalStorage","username","setUsername","token","setToken","deleteToken","useEffect","undefined","auth","btoa","createAuthString","Segment","Form","Field","onChange","e","target","value","Input","label","Button","onClick","size","color","labelPosition","OttiEnv","ottienv","setOttienv","Header","as","Group","inline","map","env","Radio","key","checked","Platform","ios","android","setIos","setAndroid","Checkbox","Stations","station","setStation","s","type","requestGithubAPI","a","body","endpoint","method","onError","onSuccess","options","headers","Authorization","fetch","fetchResponse","json","response","status","JSON","stringify","Branches","branch","setBranch","useState","branches","setBranches","requestBranches","newBranches","obj","name","oldBranches","intersection","uniq","concat","clearing","basic","primary","disabled","floated","chunk","Math","max","ceil","length","chunkX","index","grouped","App","setResponse","error","setError","request","ref","auto_merge","payload","platform","requestDeployment","className","Container","Grid","Row","columns","Column","secondary","textAlign","href","language","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ce6fd2a.chunk.js","sourcesContent":["import { useLocalStorage } from '@rehooks/local-storage'\nimport React, { useEffect } from 'react'\nimport { createAuthString } from '../helper/auth'\nimport { Segment, Form, Input, Button } from 'semantic-ui-react'\n\ninterface Props {\n  setAuth: (token?: string) => void\n}\n\nconst Credentials = ({ setAuth }: Props) => {\n  const [ username, setUsername ] = useLocalStorage('username');\n  const [ token, setToken, deleteToken ] = useLocalStorage('token');\n\n  useEffect(() => {\n    if (token === undefined) {\n      setToken('');\n    }\n  }, [ setToken, token ]);\n\n  useEffect(() => {\n    if (username && token && username !== '' && token !== '') {\n      const auth = createAuthString(username, token);\n      setAuth(auth)\n    } else {\n      setAuth(undefined)\n    }\n\n  }, [ username, token, setAuth ])\n\n  return (\n    <Segment>\n      <h3>Credentials</h3>\n      <Form>\n        <Form.Field>\n          <label>Username</label>\n          <input\n            onChange={e => {\n              setUsername(e.target.value);\n            }}\n            value={username || undefined}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Token</label>\n          <Input\n            value={token || ''}\n            label={token ? (\n              <Button onClick={() => {deleteToken();}} size={'small'} color='red'>\n                Delete Token\n              </Button>\n            ) : null}\n            labelPosition='right'\n            onChange={e => {\n              setToken(e.target.value);\n            }}\n          />\n        </Form.Field>\n      </Form>\n    </Segment>\n  );\n}\n\nexport default Credentials\n","export const createAuthString = (username: string, token: string) => {\n  return btoa(`${username}:${token}`)\n}\n","import React from 'react'\nimport { Form, Header, Segment } from 'semantic-ui-react'\n\ninterface Props {\n  ottienv?: string\n  setOttienv: any\n}\n\nconst OttiEnv = ({ ottienv, setOttienv }: Props) => {\n\n  const ottiEnvs = [ 'dev', 'stage', 'live' ]\n\n  return (\n    <Segment>\n      <Header as='h3'>\n        Otti Env\n      </Header>\n      <Form>\n        <Form.Group inline>\n          {\n            ottiEnvs.map(env => {\n              return (\n                <Form.Radio\n                  label={env}\n                  key={env}\n                  checked={ottienv === env}\n                  onChange={() => {\n                    setOttienv(env);\n                  }}\n                />\n              )\n            })\n          }\n        </Form.Group>\n      </Form>\n    </Segment>\n  );\n}\n\nexport default OttiEnv\n\n","import React from 'react'\nimport { Form, Header, Segment } from 'semantic-ui-react'\n\ninterface Props {\n  ios: boolean\n  android: boolean\n  setIos: (value: boolean) => void\n  setAndroid: (value: boolean) => void\n}\n\nconst Platform = ({ ios, android, setIos, setAndroid }: Props) => {\n  return (\n    <Segment>\n      <Header as='h3'>\n        Platform\n      </Header>\n      <Form>\n        <Form.Group inline>\n          <Form.Checkbox\n            label={'ios'}\n            checked={ios}\n            onChange={() => {\n              setIos(!ios);\n            }}\n          />\n          <Form.Checkbox\n            label={'android'}\n            checked={android}\n            onChange={() => {\n              setAndroid(!android);\n            }}\n          />\n        </Form.Group>\n      </Form>\n    </Segment>\n  );\n}\n\nexport default Platform\n\n","import React from 'react'\nimport { Form, Segment, Header } from 'semantic-ui-react'\n\ninterface Props {\n  station: string\n  setStation: (station: string) => void\n}\n\n\nconst Stations = ({ station, setStation }: Props) => {\n  const stations = [ 'wdr2', 'wdr5', 'einslive' ]\n\n  return (\n    <Segment>\n      <Header as={'h3'}>Station</Header>\n      <Form>\n        <Form.Group inline>\n          {\n            stations.map(s => {\n              return (\n                <Form.Radio\n                  label={s}\n                  type='radio'\n                  checked={station === s}\n                  onChange={() => {\n                    setStation(s);\n                  }}\n                />\n              )\n            })\n          }\n        </Form.Group>\n      </Form>\n    </Segment>\n  );\n}\n\nexport default Stations\n\n","interface RequestGithubAPI {\n  auth: string\n  method: string\n  body?: any\n  endpoint?: string\n  onError?: (text: string) => void\n  onSuccess?: (text: string) => void\n}\n\n\nexport const requestGithubAPI = async ({ auth, body, endpoint, method, onError, onSuccess }: RequestGithubAPI) => {\n  const options = {\n    method: method,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${ auth }`\n    },\n\n    body: undefined\n  };\n\n  if (body) {\n    options.body = body;\n  }\n\n  const fetchResponse = await fetch(\n    `https://api.github.com/repos/WestdeutscherRundfunkKoeln/react-native-wdr-boilerplate/${ endpoint }`,\n    options\n  );\n\n  const response = await fetchResponse.json();\n\n  if (fetchResponse.status > 320) {\n    onError && onError(`Status: ${ fetchResponse.status } | Response ${ JSON.stringify(response, null, 2) }`)\n  } else {\n    onSuccess && onSuccess(`Status: ${ fetchResponse.status } | Response ${ JSON.stringify(response, null, 2) }`)\n  }\n\n  return response;\n};\n","import { chunk, intersection, uniq } from 'lodash'\nimport React, { useState, useEffect } from 'react'\nimport { Segment, Form, Button, Header } from 'semantic-ui-react'\n\nimport { requestGithubAPI } from '../helper/githubAPI'\n\ninterface Props {\n  auth?: string\n  branch?: string\n  setBranch: (args: any) => void\n  onError: (text: string) => void\n}\n\nconst Branches = ({ auth = '', branch, setBranch, onError }: Props) => {\n  const [ branches, setBranches ] = useState([ 'master', 'develop' ]);\n\n  const requestBranches = async () => {\n    const response = await requestGithubAPI({\n      onError,\n      auth,\n      method: 'GET',\n      endpoint: 'branches'\n    });\n    const newBranches = response.map((obj: any) => {\n      return obj.name;\n    });\n\n    const oldBranches = intersection(branches, newBranches);\n\n    setBranches(uniq(oldBranches.concat(newBranches)));\n  };\n\n  useEffect(() => {\n    if (branch && branch !== '') {\n      const newBranches = uniq([ branch ].concat(branches));\n      if (newBranches !== branches) {\n        setBranches(newBranches);\n      }\n    }\n  }, [setBranches]);\n\n  return (\n    <Segment>\n      <Segment clearing basic>\n        <Button\n          primary\n          disabled={!auth}\n          onClick={() => {\n            requestBranches();\n          }}\n          floated='right'\n        >\n          Get branches from Github\n        </Button>\n        <Header as='h3' floated={'left'}>\n          Branch\n        </Header>\n      </Segment>\n      <Form>\n        <Form.Group inline>\n          {chunk(branches, Math.max(6, Math.ceil(branches.length / 3))).map(\n            (chunkX, index) => {\n              return (\n                <Form.Group grouped key={`chunk-${index}`}>\n                  {chunkX.map(name => (\n                    <Form.Radio\n                      label={name}\n                      checked={name === branch}\n                      key={name}\n                      onChange={() => {\n                        setBranch(name);\n                      }}\n                    />\n                  ))}\n                </Form.Group>\n              );\n            }\n          )}\n        </Form.Group>\n      </Form>\n    </Segment>\n  );\n}\n\nexport default Branches\n\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport { Button, Segment, Grid, Header, Container } from 'semantic-ui-react'\n\nimport Credentials from './components/Credentials'\nimport OttiEnv from './components/OttiEnv'\nimport Platform from './components/Platform'\nimport Stations from './components/Stations'\nimport { requestGithubAPI } from './helper/githubAPI'\nimport Branches from \"./components/Branches\";\n\n// @ts-ignore-next-line\nimport Highlight from 'react-highlight.js'\n\nconst App: React.FC = () => {\n  const [branch, setBranch] = useLocalStorage('branch');\n  const [station, setStation] = useState('wdr5');\n  const [ottienv, setOttienv] = useState('dev');\n  const [ios, setIos] = useState(false);\n  const [android, setAndroid] = useState(false);\n  const [response, setResponse] = useState();\n  const [auth, setAuth] = useState();\n  const [error, setError] = useState()\n\n  const request = {\n    ref: branch,\n    auto_merge: false,\n    payload: {\n      ottienv: ottienv,\n      station: station,\n      platform: {\n        ios: ios,\n        android: android\n      }\n    }\n  }\n\n  const requestDeployment = async () => {\n    setError(undefined)\n\n    await requestGithubAPI({\n      onError,\n      onSuccess: (response) => setResponse(response),\n      auth,\n      method: 'POST',\n      endpoint: 'deployments',\n      body: JSON.stringify(request)\n    });\n  };\n\n  const onError = (error: string) => {\n    setError(error)\n  }\n\n  return (\n    <div className='App'>\n      <Container>\n        <Grid>\n          <Grid.Row columns={ 1 }>\n            <Grid.Column>\n              <Credentials setAuth={ setAuth } />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={ 1 }>\n            <Grid.Column>\n              <Branches branch={ branch! } setBranch={ setBranch } auth={ auth } onError={ onError } />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={ 3 }>\n            <Grid.Column>\n              <Stations station={ station } setStation={ setStation } />\n            </Grid.Column>\n            <Grid.Column>\n              <OttiEnv ottienv={ ottienv } setOttienv={ setOttienv } />\n            </Grid.Column>\n            <Grid.Column>\n              <Platform ios={ ios } android={ android } setIos={ setIos } setAndroid={ setAndroid } />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={ 1 }>\n            <Grid.Column>\n              <Segment secondary textAlign='right'>\n                <Button primary onClick={ () => {\n                  requestDeployment()\n                } }>Send</Button>\n                { response && (\n                  <Segment textAlign='left'>\n                    Go to <a\n                    href={ \"https://github.com/WestdeutscherRundfunkKoeln/react-native-wdr-boilerplate/actions\" }>\n                    https://github.com/WestdeutscherRundfunkKoeln/react-native-wdr-boilerplate/actions\n                  </a> to see your action running!\n                  </Segment>\n                ) }\n              </Segment>\n\n            </Grid.Column>\n          </Grid.Row>\n\n          { error && (\n            <Grid.Row columns={ 1 }>\n              <Grid.Column>\n                <Segment color={ 'red' }>\n                  <Header as={ \"h3\" }>Error</Header>\n                  <Highlight language={ 'json' }>{ error }</Highlight>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n          ) }\n\n          <Grid.Row columns={ 2 }>\n            <Grid.Column>\n              <Segment secondary>\n                <Header as={ \"h3\" }>Request</Header>\n                <Highlight language={ 'json' }>\n                  { JSON.stringify(request, null, 2) }\n                </Highlight>\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              <Segment secondary>\n                <Header as={ \"h3\" }>Response</Header>\n                { response\n                  ? (<Highlight language={ 'json' }>{ response }</Highlight>)\n                  : 'Send request first ...'\n                }\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'highlight.js/styles/github.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}